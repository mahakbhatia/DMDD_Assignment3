DROP TABLE TICTACTOE;
CREATE TABLE TICTACTOE (
ROW_NUM NUMBER GENERATED ALWAYS AS IDENTITY START WITH 1 INCREMENT BY 1 MAXVALUE 3,
A VARCHAR(3) CHECK (A IN ('X','O')) ,
B VARCHAR(3) CHECK (B IN ('X','O')) ,
C VARCHAR(3) CHECK (C IN ('X','O'))
);

INSERT INTO TICTACTOE(A,B,C) VALUES(NULL,NULL,NULL);
INSERT INTO TICTACTOE(A,B,C) VALUES(NULL,NULL,NULL);
INSERT INTO TICTACTOE(A,B,C) VALUES(NULL,NULL,NULL);

DROP TABLE CHECKING;

CREATE TABLE CHECKING (
ROW_NUM NUMBER GENERATED ALWAYS AS IDENTITY START WITH 1 INCREMENT BY 1 MAXVALUE 2 ,
VARIABLE1 VARCHAR(3) 
);

INSERT INTO CHECKING(VARIABLE1) VALUES('M');
/




--------------------SP--------------------------------------------

CREATE OR REPLACE PROCEDURE GAME (SYMBOL IN VARCHAR2, ROW_NO  NUMBER , COL_NUM  NUMBER) 
AS 
  V_1 TICTACTOE.A%TYPE;
  V_2 TICTACTOE.B%TYPE;
  V_3 TICTACTOE.C%TYPE;
  
  V_4 TICTACTOE.A%TYPE;
  V_5 TICTACTOE.B%TYPE;
  V_6 TICTACTOE.C%TYPE;
  
  V_7 TICTACTOE.A%TYPE;
  V_8 TICTACTOE.B%TYPE;
  V_9 TICTACTOE.C%TYPE;
  
  CHECKER VARCHAR(2);
  ANOTHER_POSITION EXCEPTION;
  CHECKING_VARIABLE VARCHAR(2);
  SAME_PLAYER EXCEPTION;
 
BEGIN

SELECT VARIABLE1
INTO CHECKING_VARIABLE
FROM CHECKING
WHERE ROW_NUM = 1;

IF CHECKING_VARIABLE <> SYMBOL THEN
DBMS_OUTPUT.PUT_LINE('');
ELSE
RAISE SAME_PLAYER;
END IF;

IF COL_NUM = 1 THEN 
    SELECT A 
    INTO CHECKER 
    FROM TICTACTOE
    WHERE ROW_NUM = ROW_NO;
    
ELSIF COL_NUM = 2 THEN
    SELECT B 
    INTO CHECKER 
    FROM TICTACTOE
    WHERE ROW_NUM = ROW_NO;

ELSIF COL_NUM = 3 THEN
    SELECT C 
    INTO CHECKER 
    FROM TICTACTOE
    WHERE ROW_NUM = ROW_NO;

END IF;
    
IF CHECKER IS NULL THEN 
    
            
            
            IF COL_NUM =1 THEN 
            UPDATE CHECKING SET VARIABLE1 = SYMBOL WHERE ROW_NUM =1 ;
            UPDATE TICTACTOE SET A = SYMBOL WHERE ROW_NUM = ROW_NO ;
            
            FOR I IN (SELECT * FROM TICTACTOE) LOOP 
            DBMS_OUTPUT.PUT_LINE(I.A||' | '||I.B||' | '||I.C);
            END LOOP;
            
            ELSIF COL_NUM = 2 THEN 
            UPDATE CHECKING SET VARIABLE1 = SYMBOL WHERE ROW_NUM =1 ;
            UPDATE TICTACTOE SET B = SYMBOL WHERE ROW_NUM = ROW_NO;
            
            FOR I IN (SELECT * FROM TICTACTOE) LOOP 
            DBMS_OUTPUT.PUT_LINE(I.A||' | '||I.B||' | '||I.C);
            END LOOP;
            
            ELSIF COL_NUM = 3 THEN 
            UPDATE CHECKING SET VARIABLE1 = SYMBOL WHERE ROW_NUM =1;
            UPDATE TICTACTOE SET C = SYMBOL WHERE ROW_NUM = ROW_NO;
            
            FOR I IN (SELECT * FROM TICTACTOE) LOOP 
            DBMS_OUTPUT.PUT_LINE(I.A||' | '||I.B||' | '||I.C);
            END LOOP;

            ELSE
            DBMS_OUTPUT.PUT_LINE('NO UPDATE');
            
            COMMIT;
            END IF;
  
              -- VALUES OF V_1 , V_2, V_3 
              SELECT A, B, C INTO V_1,V_2,V_3
              FROM TICTACTOE
              WHERE ROW_NUM = 1;
             
              
              
              -- VALUES OF V_4 , V_5, V_6 
              SELECT A, B, C INTO V_4,V_5,V_6
              FROM TICTACTOE
              WHERE ROW_NUM = 2 ;
              
                --VALUES OF V_7 , V_8, V_9 
              SELECT A, B, C INTO V_7,V_8,V_9
              FROM TICTACTOE
              WHERE ROW_NUM = 3 ;
              
              IF (V_1 = V_2 AND V_2 = V_3 ) THEN
              DBMS_OUTPUT.PUT_LINE(V_1 || ' HAS WON');
              
              ELSIF (V_4=V_5 AND V_5=V_6 ) THEN
              DBMS_OUTPUT.PUT_LINE(V_4 || ' HAS WON');
              
              ELSIF (V_7=V_8 AND V_8=V_9 ) THEN
              DBMS_OUTPUT.PUT_LINE(V_7 || ' HAS WON');
              
              ELSIF (V_1 = V_4 AND V_4 = V_7) THEN
              DBMS_OUTPUT.PUT_LINE(V_1 || ' HAS WON');
              
              ELSIF (V_2 = V_5 AND V_5 = V_8 ) THEN
              DBMS_OUTPUT.PUT_LINE(V_2 || ' HAS WON');
              
              ELSIF (V_3 = V_6 AND V_6 = V_9 )THEN
              DBMS_OUTPUT.PUT_LINE(V_3 || ' HAS WON');
              
              ELSIF (V_1 = V_5 AND V_5 = V_9 ) THEN
              DBMS_OUTPUT.PUT_LINE(V_1 || ' HAS WON');
              
              ELSIF (V_3 = V_5 AND V_5 = V_7 )THEN
              DBMS_OUTPUT.PUT_LINE(V_3 || ' HAS WON');
              
              ELSIF
              (V_1 IS NULL OR V_2 IS NULL OR V_3 IS NULL OR V_4 IS NULL OR V_5 IS NULL OR V_6 IS NULL OR V_7 IS NULL OR V_8 IS NULL OR V_9 IS NULL) THEN
              DBMS_OUTPUT.PUT_LINE('NOT FINISHED');
              
              ELSE 
              DBMS_OUTPUT.PUT_LINE('MATCH DRAW');
              END IF;
    
ELSE
    RAISE ANOTHER_POSITION;
    
END IF ;

EXCEPTION

  WHEN ANOTHER_POSITION THEN 
  DBMS_OUTPUT.PUT_LINE('PLEASE SELECT ANOTHER POSTION');
  
  WHEN SAME_PLAYER THEN
  DBMS_OUTPUT.PUT_LINE('SAME PLAYER TRYING TO PLAY');

END;
EXEC GAME('O',1,3);
1)	First player playing:
 

2)	When the first player tries to play again: An exception is raised, and output is displayed as ‘Same player trying to play again’
 




3)	When second player plays, tries to play at the same position where the first player has already entered his input: An exception is raised, and output is displayed as ‘Please select another position’

 


4)	When second player plays at another position it accepts and the game is not finished yet hence the output is ‘Not Finished’
 






5)	If player with ‘O’ wins, output is displayed as ‘O has won’ and if ‘X’ wins then output is displayed as ‘X has won’
 

6)	If neither one of them win, then the match is drawn 
 